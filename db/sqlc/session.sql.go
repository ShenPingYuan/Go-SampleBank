// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :execresult
INSERT INTO sessions (
  id,
  user_id,
  refresh_token,
  user_agent,
  client_ip,
  is_blocked,
  expire_time,
  created_at
) VALUES (
  ?,?,?,?,?,?,?,?
)
`

type CreateSessionParams struct {
	ID           string    `json:"id"`
	UserID       int64     `json:"userID"`
	RefreshToken string    `json:"refreshToken"`
	UserAgent    string    `json:"userAgent"`
	ClientIp     string    `json:"clientIp"`
	IsBlocked    bool      `json:"isBlocked"`
	ExpireTime   time.Time `json:"expireTime"`
	CreatedAt    time.Time `json:"createdAt"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpireTime,
		arg.CreatedAt,
	)
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, expire_time, created_at FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpireTime,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, expire_time, created_at FROM sessions
WHERE refresh_token = ? LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpireTime,
		&i.CreatedAt,
	)
	return i, err
}
